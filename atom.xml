<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZJBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zongjian.site/"/>
  <updated>2018-08-27T04:27:58.505Z</updated>
  <id>https://zongjian.site/</id>
  
  <author>
    <name>Zong Jian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义 cordova 插件开发以及使用</title>
    <link href="https://zongjian.site/2018/08/27/%E8%87%AA%E5%AE%9A%E4%B9%89cordova%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://zongjian.site/2018/08/27/自定义cordova插件开发以及使用/</id>
    <published>2018-08-27T03:17:59.000Z</published>
    <updated>2018-08-27T04:27:58.505Z</updated>
    
    <content type="html"><![CDATA[<p>如何写一个 cordova 用于 ionic4 项目中呢？在开发APP的时候曾经遇到过这样一个问题：该 APP 是在 android 系统的 POS 机上使用，采用 ionic4 开发，想通过 js 调用 POS 机的打印功能， 已提供打印的 SDK。自己在网上找了很多资料，踩过一些坑，现在将自定义 cordova 插件开发以及使用流程记录如下：</p><h3 id="安装plugman"><a href="#安装plugman" class="headerlink" title="安装plugman"></a>安装plugman</h3><p><code>npm install -g plugman</code></p><h3 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// plugman creat --name 插件名字 --plugin_id 插件id --plugin_version 插件版本号</span><br><span class="line">plugman create --name cordovaPaxPrint --plugin_id cordova-plugin-pax-print --plugin_version 1.0</span><br></pre></td></tr></table></figure><h3 id="添加安卓平台支持"><a href="#添加安卓平台支持" class="headerlink" title="添加安卓平台支持"></a>添加安卓平台支持</h3><p><code>plugman platform add --platform_name android</code></p><h3 id="添加插件"><a href="#添加插件" class="headerlink" title="添加插件"></a>添加插件</h3><p><code>sudo ionic cordova plugin add /Users/jian/Workspace/Git/cordovaPaxPrint</code></p><h3 id="删除插件"><a href="#删除插件" class="headerlink" title="删除插件"></a>删除插件</h3><p><code>sudo ionic cordova plugin rm cordova-plugin-pax-print</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如何写一个 cordova 用于 ionic4 项目中呢？在开发APP的时候曾经遇到过这样一个问题：该 APP 是在 android 系统的 POS 机上使用，采用 ionic4 开发，想通过 js 调用 POS 机的打印功能， 已提供打印的 SDK。自己在网上找了很多资料
      
    
    </summary>
    
    
      <category term="APP" scheme="https://zongjian.site/tags/APP/"/>
    
      <category term="cordova" scheme="https://zongjian.site/tags/cordova/"/>
    
  </entry>
  
  <entry>
    <title>使用ionic开发APP</title>
    <link href="https://zongjian.site/2018/08/12/%E4%BD%BF%E7%94%A8ionic%E5%BC%80%E5%8F%91APP/"/>
    <id>https://zongjian.site/2018/08/12/使用ionic开发APP/</id>
    <published>2018-08-12T14:20:37.000Z</published>
    <updated>2018-08-27T04:35:05.050Z</updated>
    
    <content type="html"><![CDATA[<p>ionic 是一个专注于用WEB开发技术，基于HTML5创建类似于手机平台原生应用的一个开发框架。绑定了 Angular 和 Sass。这个框架的目的是从web的角度开发手机应用，基于 PhoneGap 的编译平台，可以实现编译成各个平台的应用程序。</p><p>ionic 主要关注外观和体验，以及和应用程序的 UI 交互，特别适合用于基于 Hybird 模式的 HTML5 移动应用程序开发。</p><h3 id="使用-ionic-开发流程"><a href="#使用-ionic-开发流程" class="headerlink" title="使用 ionic 开发流程"></a>使用 ionic 开发流程</h3><ol><li><p>安装 ionic 和 cordova</p><p> <code>npm install -g ionic cordova</code></p></li><li><p>创建 App</p><p> <code>ionic start myApp tabs</code></p></li><li><p>运行 App</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd myApp</span><br><span class="line">ionic serve</span><br><span class="line">ionic cordova run android --device</span><br><span class="line">ionic cordova run ios --device</span><br></pre></td></tr></table></figure></li><li><p>icon和splash</p><p> 原始图标尺寸及位置：1024×1024px and located at resources/icon.png</p><p> 原始启动页面尺寸及位置：2732×2732px and located at resources/splash.png</p><p> 用以下命令可以根据原始图标和启动页面自动生成不同尺寸以适应不同机型的图标和启动页面：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova resources </span><br><span class="line">ionic cordova resources ios</span><br><span class="line">ionic cordova resources android</span><br></pre></td></tr></table></figure></li><li><p>打包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ionic cordova build ios --prod --release</span><br><span class="line">ionic cordova build android --prod --release</span><br></pre></td></tr></table></figure></li></ol><p>ionic android 测试版本启动相当慢，解决办法是打成生产包，并将静态文件进行压缩处理：</p><p><code>sudo ionic cordova build android --prod --aot --minifyjs --minifycss --optimizejs</code></p><h3 id="android打包发布流程"><a href="#android打包发布流程" class="headerlink" title="android打包发布流程"></a>android打包发布流程</h3><ol><li>首先在项目根目录执行命令：</li></ol><p><code>ionic cordova build android --prod --release</code></p><p>构建完成之后，会在项目根目录生成 platform/android 文件夹。</p><ol start="2"><li>用 Android Studio 打开 platform 中的 android 文件夹。</li></ol><p>点击 Build &gt; Generate Signed APK…</p><p><img src="https://git.zongjian.site/zongjian/markdown-photos/raw/0c7ac147a093c2fb7faf5d0f164e959ba46d9c38/mPaxpay/Screen%20Shot%202018-06-01%20at%2011.45.50.png" alt=""></p><p>如果是首次打包，需要创建签名。<br>创建签名过程如下：</p><p><img src="https://git.zongjian.site/zongjian/markdown-photos/raw/79def468bbc1bfc47ef0b05025c9d114a75d3821/mPaxpay/Screen%20Shot%202018-06-01%20at%2013.35.34.png" alt=""></p><p>填好上图中的签名信息后，保存该签名文件，以备下次使用。</p><p>如果有签名文件，则直接选择签名文件后，填写密码即可，然后依次点击下一步。</p><h3 id="禁止横屏显示"><a href="#禁止横屏显示" class="headerlink" title="禁止横屏显示"></a>禁止横屏显示</h3><p>ionic 中禁止手机横屏显示需要用到插件： Screen Orientation</p><p>1.安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ionic cordova plugin add cordova-plugin-screen-orientation</span><br><span class="line">$ npm install --save @ionic-native/screen-orientation</span><br></pre></td></tr></table></figure><p>2.在 app.module.ts 中的 providers 添加 ScreenOrientation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ScreenOrientation &#125; from &apos;@ionic-native/screen-orientation&apos;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">providers: [</span><br><span class="line">    ...</span><br><span class="line">    ScreenOrientation,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>3.在 app.component.ts 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ScreenOrientation &#125; from &apos;@ionic-native/screen-orientation&apos;;</span><br><span class="line"></span><br><span class="line">... </span><br><span class="line"></span><br><span class="line">constructor(</span><br><span class="line">    ...</span><br><span class="line">    screenOrientation: ScreenOrientation,</span><br><span class="line">    ...) &#123;</span><br><span class="line">    platform.ready().then(() =&gt; &#123;</span><br><span class="line">      ...</span><br><span class="line">      screenOrientation.lock(&apos;portrait&apos;);  // 禁止横屏</span><br><span class="line">      ...</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="软键盘弹出问题"><a href="#软键盘弹出问题" class="headerlink" title="软键盘弹出问题"></a>软键盘弹出问题</h3><p>Android SDK目前提供的软键盘弹出模式接口只有两种：</p><p>　　　　一是弹出时自动回冲界面，将所有元素上顶；</p><p>　　　　一种则是不重绘界面，直接将控件元素遮住；</p><ol><li>ionic 中弹出键盘遮挡住输入框：<br>　　在 <code>config.xml</code> 中修改全屏为<code>FALSE</code>并添加  <code>adjustPan</code>  (<code>adjstResize</code>没有成功)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　 &lt;preference name=&quot;Fullscreen&quot; value=&quot;False&quot; /&gt;</span><br><span class="line"> 　　&lt;preference name=&quot;android-windowSoftInputMode&quot; value=&quot;adjustPan&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>软键盘弹出后，将页面图片的高度压缩问题：（我的登录页面是用了一整张图片）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AndroidManifest.xml文件中界面对应的&lt;activity&gt;里加入</span><br><span class="line">android:windowSoftInputMode=&quot;adjustPan&quot;   键盘就会覆盖屏幕</span><br><span class="line">android:windowSoftInputMode=&quot;stateVisible|adjustResize&quot;   屏幕整体上移</span><br><span class="line">android:windowSoftInputMode=&quot;adjustPan|stateHidden&quot; 软键盘弹出，界面布局不变，这是解决弹出软键盘，界面整体被压缩的方式</span><br></pre></td></tr></table></figure><p><strong>参考文档</strong></p><p><a href="https://ionicframework.com/docs/" target="_blank" rel="noopener">ionic官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ionic 是一个专注于用WEB开发技术，基于HTML5创建类似于手机平台原生应用的一个开发框架。绑定了 Angular 和 Sass。这个框架的目的是从web的角度开发手机应用，基于 PhoneGap 的编译平台，可以实现编译成各个平台的应用程序。&lt;/p&gt;
&lt;p&gt;ioni
      
    
    </summary>
    
    
      <category term="Ionic" scheme="https://zongjian.site/tags/Ionic/"/>
    
      <category term="APP" scheme="https://zongjian.site/tags/APP/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript之作用域与闭包</title>
    <link href="https://zongjian.site/2018/05/21/JavaScript%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <id>https://zongjian.site/2018/05/21/JavaScript之作用域与闭包/</id>
    <published>2018-05-21T02:38:24.000Z</published>
    <updated>2018-08-27T05:38:46.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域（Scope）在 JavaScript 中是一个重要的概念。说白了，作用域表示的是一个变量的可用范围，包括两种：</p><ul><li><p>全局作用域（全局变量）：随处可用，可反复使用——容易造成全局污染</p></li><li><p>函数作用域（局部作用域）：仅函数内可用，不可重复使用</p></li></ul><p>下面看一段简单的代码：</p><pre><code>var a = 10;function fun() {    var a = 100;    a++;    console.log(a);}fun(); // 101console.log(a); // 10</code></pre><p>上面代码中的 fun 函数外的 a 为全局变量，fun 函数里的 a 为局部变量。</p><p>我们可以通过函数的生命周期来理解作用域：</p><ol><li>在开始执行上述代码前，JS会先创建执行环境栈（ECS），临时保存正在执行的函数的执行环境，并向执行环境栈中压入第一个默认函数main()，然后，创建全局作用域对象window。如下图所示：</li></ol><p><img src="/2018/05/21/JavaScript之作用域与闭包/func1.png" alt=""></p><ol start="2"><li>在定义函数时，JS会创建函数对象，封装函数定义，声明函数名变量，引用函数对象，函数对象的scope属性饮用回创建函数时的作用域。如下图所示：</li></ol><p><img src="/2018/05/21/JavaScript之作用域与闭包/func2.png" alt=""></p><ol start="3"><li>调用函数时，ECS中压入一个新的元素（执行环境）记录新函数的调用，创建一个活动对象，保存本次函数调用用到的局部变量；ESC中的新执行环境元素，引用活动对象； 活动对象中的parent属性引用函数的scope；执行过程中：优先使用活动对象中的局部变量，局部没有才沿着parent向父级作用域找。如下图所示：</li></ol><p><img src="/2018/05/21/JavaScript之作用域与闭包/func3.png" alt=""></p><ol start="4"><li>函数调用后，执行环境栈中本次函数的执行环境出栈，活动对象被释放，局部变量一同释放。如下图所示：</li></ol><p><img src="/2018/05/21/JavaScript之作用域与闭包/func4.png" alt=""></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包（Closure）是 JavaScript 最强大的特性之一。闭包在日常编码工作中非常常见。但是，它会对性能造成影响。</p><p>通过上述作用域我们知道：全局变量可以反复使用，但极易被污染，而局部变量仅函数内部可用，不可重用。如果既想重用变量，又想保护变量不被污染，那么我们就可以采用闭包。闭包是既重用变量，又保护变量不被污染的一种机制。</p><p>一般采取以下三个步骤即可实现闭包：</p><pre><code>1. 用外层函数包裹受保护的变量和操作变量的内层函数2. 外层函数将内层函数返回3. 使用者调用外层函数，获得内层函数的对象function outer() {    var i=1;  // AO    return function() {        console.log(i++);    }}var getNum=outer();getNum();//1getNum();//2getNum();//3</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h3&gt;&lt;p&gt;作用域（Scope）在 JavaScript 中是一个重要的概念。说白了，作用域表示的是一个变量的可用范围，包括两种：&lt;/p&gt;
&lt;u
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://zongjian.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML语义化</title>
    <link href="https://zongjian.site/2017/11/13/HTML%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>https://zongjian.site/2017/11/13/HTML语义化/</id>
    <published>2017-11-13T02:35:23.000Z</published>
    <updated>2018-08-28T02:41:33.329Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 结构语义化，是近几年才提出来的，对比之前的 HTML 结构，大多是一堆没有语义的标签。用的最多的就是 DIV+CSS，为了改变这种现状，开发者们和官方提出了 HTML结构语义化的概念，并且在 HTML5 添加了很多语义化标签。</p><h3 id="什么是-HTML-语义化"><a href="#什么是-HTML-语义化" class="headerlink" title="什么是 HTML 语义化"></a>什么是 HTML 语义化</h3><p>语义化的含义就是用正确的标签做正确的事情，html 语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；在没有样式 CCS 情况下也以一种文档格式显示，并且是容易阅读的。搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p><h3 id="为什么要语义化？"><a href="#为什么要语义化？" class="headerlink" title="为什么要语义化？"></a>为什么要语义化？</h3><ul><li>有利于SEO，有助于爬虫抓取更多的有效信息，爬虫是依赖于标签来确定上下文和各个关键字的权重。</li><li>语义化的HTML在没有CSS的情况下也能呈现较好的内容结构与代码结构</li><li>方便其他设备的解析</li><li>便于团队开发和维护</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTML 结构语义化，是近几年才提出来的，对比之前的 HTML 结构，大多是一堆没有语义的标签。用的最多的就是 DIV+CSS，为了改变这种现状，开发者们和官方提出了 HTML结构语义化的概念，并且在 HTML5 添加了很多语义化标签。&lt;/p&gt;
&lt;h3 id=&quot;什么是-HT
      
    
    </summary>
    
    
      <category term="HTML" scheme="https://zongjian.site/tags/HTML/"/>
    
  </entry>
  
</feed>
