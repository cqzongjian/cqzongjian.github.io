<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[自定义 cordova 插件开发以及使用]]></title>
    <url>%2F2018%2F08%2F27%2F%E8%87%AA%E5%AE%9A%E4%B9%89cordova%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[如何写一个 cordova 用于 ionic4 项目中呢？在开发APP的时候曾经遇到过这样一个问题：该 APP 是在 android 系统的 POS 机上使用，采用 ionic4 开发，想通过 js 调用 POS 机的打印功能， 已提供打印的 SDK。自己在网上找了很多资料，踩过一些坑，现在将自定义 cordova 插件开发以及使用流程记录如下： 安装plugmannpm install -g plugman 创建插件12// plugman creat --name 插件名字 --plugin_id 插件id --plugin_version 插件版本号plugman create --name cordovaPaxPrint --plugin_id cordova-plugin-pax-print --plugin_version 1.0 添加安卓平台支持plugman platform add --platform_name android 添加插件sudo ionic cordova plugin add /Users/jian/Workspace/Git/cordovaPaxPrint 删除插件sudo ionic cordova plugin rm cordova-plugin-pax-print]]></content>
      <tags>
        <tag>APP</tag>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ionic开发APP]]></title>
    <url>%2F2018%2F08%2F12%2F%E4%BD%BF%E7%94%A8ionic%E5%BC%80%E5%8F%91APP%2F</url>
    <content type="text"><![CDATA[ionic 是一个专注于用WEB开发技术，基于HTML5创建类似于手机平台原生应用的一个开发框架。绑定了 Angular 和 Sass。这个框架的目的是从web的角度开发手机应用，基于 PhoneGap 的编译平台，可以实现编译成各个平台的应用程序。 ionic 主要关注外观和体验，以及和应用程序的 UI 交互，特别适合用于基于 Hybird 模式的 HTML5 移动应用程序开发。 使用 ionic 开发流程 安装 ionic 和 cordova npm install -g ionic cordova 创建 App ionic start myApp tabs 运行 App 1234cd myAppionic serveionic cordova run android --deviceionic cordova run ios --device icon和splash 原始图标尺寸及位置：1024×1024px and located at resources/icon.png 原始启动页面尺寸及位置：2732×2732px and located at resources/splash.png 用以下命令可以根据原始图标和启动页面自动生成不同尺寸以适应不同机型的图标和启动页面： 123ionic cordova resources ionic cordova resources iosionic cordova resources android 打包 12ionic cordova build ios --prod --releaseionic cordova build android --prod --release ionic android 测试版本启动相当慢，解决办法是打成生产包，并将静态文件进行压缩处理： sudo ionic cordova build android --prod --aot --minifyjs --minifycss --optimizejs android打包发布流程 首先在项目根目录执行命令： ionic cordova build android --prod --release 构建完成之后，会在项目根目录生成 platform/android 文件夹。 用 Android Studio 打开 platform 中的 android 文件夹。 点击 Build &gt; Generate Signed APK… 如果是首次打包，需要创建签名。创建签名过程如下： 填好上图中的签名信息后，保存该签名文件，以备下次使用。 如果有签名文件，则直接选择签名文件后，填写密码即可，然后依次点击下一步。 禁止横屏显示ionic 中禁止手机横屏显示需要用到插件： Screen Orientation 1.安装插件 12$ ionic cordova plugin add cordova-plugin-screen-orientation$ npm install --save @ionic-native/screen-orientation 2.在 app.module.ts 中的 providers 添加 ScreenOrientation 123456789import &#123; ScreenOrientation &#125; from &apos;@ionic-native/screen-orientation&apos;;...providers: [ ... ScreenOrientation, ... ] 3.在 app.component.ts 中 1234567891011121314import &#123; ScreenOrientation &#125; from &apos;@ionic-native/screen-orientation&apos;;... constructor( ... screenOrientation: ScreenOrientation, ...) &#123; platform.ready().then(() =&gt; &#123; ... screenOrientation.lock(&apos;portrait&apos;); // 禁止横屏 ... &#125;); &#125; 软键盘弹出问题Android SDK目前提供的软键盘弹出模式接口只有两种： 一是弹出时自动回冲界面，将所有元素上顶； 一种则是不重绘界面，直接将控件元素遮住； ionic 中弹出键盘遮挡住输入框： 在 config.xml 中修改全屏为FALSE并添加 adjustPan (adjstResize没有成功)12 &lt;preference name=&quot;Fullscreen&quot; value=&quot;False&quot; /&gt; &lt;preference name=&quot;android-windowSoftInputMode&quot; value=&quot;adjustPan&quot;/&gt; 软键盘弹出后，将页面图片的高度压缩问题：（我的登录页面是用了一整张图片） 1234AndroidManifest.xml文件中界面对应的&lt;activity&gt;里加入android:windowSoftInputMode=&quot;adjustPan&quot; 键盘就会覆盖屏幕android:windowSoftInputMode=&quot;stateVisible|adjustResize&quot; 屏幕整体上移android:windowSoftInputMode=&quot;adjustPan|stateHidden&quot; 软键盘弹出，界面布局不变，这是解决弹出软键盘，界面整体被压缩的方式 参考文档 ionic官方文档]]></content>
      <tags>
        <tag>Ionic</tag>
        <tag>APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript之作用域与闭包]]></title>
    <url>%2F2018%2F05%2F21%2FJavaScript%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85%2F</url>
    <content type="text"><![CDATA[作用域作用域（Scope）在 JavaScript 中是一个重要的概念。说白了，作用域表示的是一个变量的可用范围，包括两种： 全局作用域（全局变量）：随处可用，可反复使用——容易造成全局污染 函数作用域（局部作用域）：仅函数内可用，不可重复使用 下面看一段简单的代码： var a = 10; function fun() { var a = 100; a++; console.log(a); } fun(); // 101 console.log(a); // 10 上面代码中的 fun 函数外的 a 为全局变量，fun 函数里的 a 为局部变量。 我们可以通过函数的生命周期来理解作用域： 在开始执行上述代码前，JS会先创建执行环境栈（ECS），临时保存正在执行的函数的执行环境，并向执行环境栈中压入第一个默认函数main()，然后，创建全局作用域对象window。如下图所示： 在定义函数时，JS会创建函数对象，封装函数定义，声明函数名变量，引用函数对象，函数对象的scope属性饮用回创建函数时的作用域。如下图所示： 调用函数时，ECS中压入一个新的元素（执行环境）记录新函数的调用，创建一个活动对象，保存本次函数调用用到的局部变量；ESC中的新执行环境元素，引用活动对象； 活动对象中的parent属性引用函数的scope；执行过程中：优先使用活动对象中的局部变量，局部没有才沿着parent向父级作用域找。如下图所示： 函数调用后，执行环境栈中本次函数的执行环境出栈，活动对象被释放，局部变量一同释放。如下图所示： 闭包闭包（Closure）是 JavaScript 最强大的特性之一。闭包在日常编码工作中非常常见。但是，它会对性能造成影响。 通过上述作用域我们知道：全局变量可以反复使用，但极易被污染，而局部变量仅函数内部可用，不可重用。如果既想重用变量，又想保护变量不被污染，那么我们就可以采用闭包。闭包是既重用变量，又保护变量不被污染的一种机制。 一般采取以下三个步骤即可实现闭包： 1. 用外层函数包裹受保护的变量和操作变量的内层函数 2. 外层函数将内层函数返回 3. 使用者调用外层函数，获得内层函数的对象 function outer() { var i=1; // AO return function() { console.log(i++); } } var getNum=outer(); getNum();//1 getNum();//2 getNum();//3]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
